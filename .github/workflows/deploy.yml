name: deploy
on:
  schedule:
    - cron: '0 21 * * TUE' # Run every Tuesday at 21:00 (UTC)
  push:
    tags:
      - 'v*.*.*'
      - 'p*'

jobs:
  windows-rav1e-ch-binary:

    # if: github.repository_owner == 'xiph'
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/setup-nasm@v1

    - name: Install stable
      uses: dtolnay/rust-toolchain@stable
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Build rav1e-ch (unstable)
      env:
        RUSTFLAGS: "-C target-cpu=x86-64-v3"
        CARGO_PROFILE_RELEASE_LTO: "true"
        CARGO_PROFILE_RELEASE_CODEGEN_UNITS: "1"
      run: cargo build --release --features=unstable,channel-api --bin=rav1e-ch

    - name: Upload rav1e-ch msvc binary (unstable)
      uses: actions/upload-artifact@v3
      with:
        name: rav1e-ch (unstable) (AVX2)
        path: target/release/rav1e-ch.exe


  windows-binaries:
    strategy:
      matrix:
        conf:
         - msvc
         - gnu
        target_cpu:
         - x86-64
         - x86-64-v2
         - x86-64-v3
        include:
         - conf: msvc
           name: msvc-generic
           toolchain: stable
           profile: release
           target_cpu: x86-64
         - conf: msvc
           name: msvc-sse4
           toolchain: stable
           profile: release
           target_cpu: x86-64-v2
         - conf: msvc
           name: msvc-avx2
           toolchain: stable
           profile: release
           target_cpu: x86-64-v3
         - conf: gnu
           name: gnu-generic
           toolchain: stable-x86_64-pc-windows-gnu
           profile: release-no-lto
           target_cpu: x86-64
         - conf: gnu
           name: gnu-sse4
           toolchain: stable-x86_64-pc-windows-gnu
           profile: release-no-lto
           target_cpu: x86-64-v2
         - conf: gnu
           name: gnu-avx2
           toolchain: stable
           profile: release-strip
           target_cpu: x86-64-v3

    # if: github.repository_owner == 'xiph'
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/setup-nasm@v1

    - name: Install cargo-c
      run: |
        $LINK = "https://github.com/lu-zero/cargo-c/releases/latest/download"
        $CARGO_C_FILE = "cargo-c-windows-msvc"
        curl -LO "$LINK/$CARGO_C_FILE.zip"
        7z e -y "$CARGO_C_FILE.zip" -o"${env:USERPROFILE}\.cargo\bin"

    - name: Install stable
      uses: dtolnay/rust-toolchain@stable
      with:
        profile: minimal
        toolchain: ${{ matrix.toolchain }}
        override: true

    - name: Build rav1e
      env:
        RUSTFLAGS: "-C target-cpu=${{ matrix.target_cpu }}"
      run: cargo build --profile ${{ matrix.profile }}

    - name: Run cargo-c
      env:
        RUSTFLAGS: "-C target-cpu=${{ matrix.target_cpu }}"
      run: |
        cargo fetch
        cargo cinstall --profile ${{ matrix.profile }} --destdir="C:\" --offline

    - name: Rename cargo-c folder
      run: Rename-Item "C:\usr\local" "C:\usr\rav1e-windows-${{ matrix.conf }}-sdk"

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "::set-output name=version::$VERSION"

    - name: Package pre-release binaries
      if: >
        startsWith(github.ref, 'refs/tags/p') || github.event_name == 'schedule'
      run: |
        7z a rav1e-windows-${{ matrix.name }}.zip `
             "C:\usr\rav1e-windows-${{ matrix.conf }}-sdk"

    - name: Package release binaries
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        $ZIP_PREFIX = "rav1e-${{ steps.tagName.outputs.version }}-windows"
        7z a "$ZIP_PREFIX-${{ matrix.name }}.zip" `
             "C:\usr\rav1e-windows-${{ matrix.conf }}-sdk"

    - name: Upload rav1e msvc binary
      if: matrix.conf == 'msvc'
      uses: actions/upload-artifact@v3
      with:
        name: rav1e (Windows-${{ matrix.name }})
        path: target/${{ matrix.profile }}/rav1e.exe

    - name: Upload pre-release binaries
      if: >
        startsWith(github.ref, 'refs/tags/p') || github.event_name == 'schedule'
      uses: actions/upload-artifact@v3
      with:
        name: rav1e (Windows-${{ matrix.name }})
        path: rav1e-windows-${{ matrix.name }}.zip

    - name: Upload release binaries
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v3
      with:
        name: rav1e ${{ steps.tagName.outputs.version }} (Windows-${{ matrix.name }})
        path: rav1e-${{ steps.tagName.outputs.version }}-windows-${{ matrix.name }}.zip


  linux-binaries:
    strategy:
      matrix:
        build:
          - binary
          - sdk
        target:
         - i686-unknown-linux-musl
         - x86_64-unknown-linux-musl
         - aarch64-unknown-linux-musl
        include:
         - target: x86_64-unknown-linux-musl
           target_cpu: x86-64
           name: linux-generic
         - target: x86_64-unknown-linux-musl
           target_cpu: x86-64-v2
           name: linux-sse4
         - target: x86_64-unknown-linux-musl
           target_cpu: x86-64-v3
           name: linux-avx2
         - target: aarch64-unknown-linux-musl
           target_cpu: generic
           name: linux-aarch64
         - target: i686-unknown-linux-musl
           target_cpu: generic
           name: linux-i686
         - build: binary
           pkgname: rav1e
         - build: sdk
           pkgname: librav1e

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/setup-nasm@v1

    - name: Install ${{ matrix.target }} target
      uses: dtolnay/rust-toolchain@stable
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Install cross
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Build rav1e binary
      if: matrix.build == 'binary'
      env:
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_RUSTFLAGS:
          "-C target-cpu=${{ matrix.target_cpu }}"
      run: cross build --target ${{ matrix.target }} --profile release-strip

    - name: Build rav1e libraries
      if: matrix.build == 'sdk'
      env:
        CROSS_BUILD_DOCKERFILE: ./cross/Dockerfile.libs
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_RUSTFLAGS:
          "-C target-feature=-crt-static -C target-cpu=${{ matrix.target_cpu }}"
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS: "-C target-feature=-crt-static"
        CARGO_TARGET_I686_UNKNOWN_LINUX_MUSL_RUSTFLAGS: "-C target-feature=-crt-static"
      run: |
        cross build --target ${{ matrix.target }} --profile release-strip
        mkdir -p dist/{include/rav1e,lib/pkgconfig}
        cp target/release-strip/rav1e.h dist/include/rav1e/
        cp target/release-strip/rav1e.{a,so} lib/
        cp target/release-strip/rav1e.pc lib/pkgconfig

    - name: Get pre-release artifact filename
      if: |
        startsWith(github.ref, 'refs/tags/p') ||
        github.event_name == 'schedule'
      run: |
        echo "ARTIFACT_FILE=${{ matrix.pkgname }}-${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=${{ matrix.pkgname }} (${{ matrix.name }})" >> $GITHUB_ENV

    - name: Get release artifact filename
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "ARTIFACT_FILE=${{ matrix.pkgname }}-$VERSION-${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=${{ matrix.pkgname }} $VERSION (${{ matrix.name }})" >> $GITHUB_ENV

    - name: Create a binary tar
      if: >
        matrix.build == 'binary' &&
          (startsWith(github.ref, 'refs/tags/p') ||
           startsWith(github.ref, 'refs/tags/v') ||
           github.event_name == 'schedule')
      run: |
        cd target/${{ matrix.target }}/release-strip
        tar -czvf $GITHUB_WORKSPACE/$ARTIFACT_FILE rav1e

    - name: Create a lib tar
      if: >
        matrix.build == 'sdk' &&
          (startsWith(github.ref, 'refs/tags/p') ||
           startsWith(github.ref, 'refs/tags/v') ||
           github.event_name == 'schedule')
      run: |
        mkdir -p dist/{include/rav1e,lib/pkgconfig}
        cp librav1e.{a,so} dist/lib
        cp rav1e.h dist/include/rav1e
        cp rav1e.pc dist/lib/pkgconfig
        cd dist
        tar -czvf $GITHUB_WORKSPACE/$ARTIFACT_FILE *

    - name: Upload artifact
      if: >
        startsWith(github.ref, 'refs/tags/p') ||
        startsWith(github.ref, 'refs/tags/v') ||
        github.event_name == 'schedule'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_FILE }}

  macos-binaries:
    # if: github.repository_owner == 'xiph'
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install nasm
      run: brew install nasm

    - name: Install stable
      uses: dtolnay/rust-toolchain@stable
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Build rav1e binaries
      run: cargo install --profile release-strip --destdir dist

    - name: Install cargo-c
      run: |
        curl -sLO https://github.com/lu-zero/cargo-c/releases/latest/download/cargo-c-macos.zip
        unzip -o cargo-c-macos.zip -d ~/.cargo/bin
        rm cargo-c-macos.zip

    - name: Build rav1e c library
      run: |
        cargo cbuild --library-type staticlib --library-type cdylib --profile release-strip
        mkdir -p dist/{include/rav1e,lib/pkgconfig}
        cp target/release-strip/rav1e.h dist/include/rav1e/
        cp target/release-strip/rav1e.{a,so} lib/
        cp target/release-strip/rav1e.pc lib/pkgconfig

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/v')
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "::set-output name=version::$VERSION"

    - name: Create a pre-release zip
      if: >
        startsWith(github.ref, 'refs/tags/p') || github.event_name == 'schedule'
      run: |
        cd target/release-strip
        zip -9 $GITHUB_WORKSPACE/rav1e-macos.zip rav1e rav1e.h 

    - name: Create a release zip
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        ZIP_FILE=rav1e-${{ steps.tagName.outputs.version }}-macos.zip
        cd target/release-strip
        zip -9 $GITHUB_WORKSPACE/$ZIP_FILE rav1e rav1e.h rav1e.pc librav1e.a librav1e.d librav1e.rlib librav1e.dylib

    - name: Upload pre-release binaries
      if: >
        startsWith(github.ref, 'refs/tags/p') || github.event_name == 'schedule'
      uses: actions/upload-artifact@v3
      with:
        name: rav1e (MacOS)
        path: rav1e-macos.zip

    - name: Upload release binaries
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v3
      with:
        name: rav1e ${{ steps.tagName.outputs.version }} (MacOS)
        path: rav1e-${{ steps.tagName.outputs.version }}-macos.zip

  deploy:
    needs: [windows-rav1e-ch-binary, windows-binaries, linux-binaries, macos-binaries]
    # if: github.repository_owner == 'xiph'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/v')
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "::set-output name=version::$VERSION"

    - name: Get date for a scheduled pre-release
      if: github.event_name == 'schedule'
      id: tagDate
      run: |
        DATE=$(date "+%Y%m%d")
        echo "::set-output name=date::$DATE"

    - name: Create a scheduled pre-release
      if: github.event_name == 'schedule'
      uses: softprops/action-gh-release@v1
      with:
        name: Weekly pre-release
        prerelease: true
        tag_name: p${{ steps.tagDate.outputs.date }}
        files: |
          Cargo.lock
          rav1e (Windows-msvc-generic)/rav1e.exe
          rav1e-ch (unstable) (AVX2)/rav1e-ch.exe
          rav1e (linux-generic)/rav1e-linux-generic.tar.gz
          rav1e (linux-sse4)/rav1e-linux-sse4.tar.gz
          rav1e (linux-avx2)/rav1e-linux-avx2.tar.gz
          rav1e (linux-aarch64)/rav1e-linux-aarch64.tar.gz
          rav1e (linux-i686)/rav1e-linux-i686.tar.gz
          rav1e (MacOS)/rav1e-macos.zip
          rav1e (Windows-msvc-generic)/rav1e-windows-msvc-generic.zip
          rav1e (Windows-msvc-sse4)/rav1e-windows-msvc-sse4.zip
          rav1e (Windows-msvc-avx2)/rav1e-windows-msvc-avx2.zip
          rav1e (Windows-gnu-generic)/rav1e-windows-gnu-generic.zip
          rav1e (Windows-gnu-sse4)/rav1e-windows-gnu-sse4.zip
          rav1e (Windows-gnu-avx2)/rav1e-windows-gnu-avx2.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a pre-release
      if: startsWith(github.ref, 'refs/tags/p')
      uses: softprops/action-gh-release@v1
      with:
        name: Weekly pre-release
        prerelease: true
        files: |
          Cargo.lock
          rav1e (Windows-msvc-generic)/rav1e.exe
          rav1e-ch (unstable) (AVX2)/rav1e-ch.exe
          rav1e (linux-generic)/rav1e-linux-generic.tar.gz
          rav1e (linux-sse4)/rav1e-linux-sse4.tar.gz
          rav1e (linux-avx2)/rav1e-linux-avx2.tar.gz
          rav1e (linux-aarch64)/rav1e-linux-aarch64.tar.gz
          rav1e (linux-i686)/rav1e-linux-i686.tar.gz
          rav1e (MacOS)/rav1e-macos.zip
          rav1e (Windows-msvc-generic)/rav1e-windows-msvc-generic.zip
          rav1e (Windows-msvc-sse4)/rav1e-windows-msvc-sse4.zip
          rav1e (Windows-msvc-avx2)/rav1e-windows-msvc-avx2.zip
          rav1e (Windows-gnu-generic)/rav1e-windows-gnu-generic.zip
          rav1e (Windows-gnu-sse4)/rav1e-windows-gnu-sse4.zip
          rav1e (Windows-gnu-avx2)/rav1e-windows-gnu-avx2.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        name: v${{ steps.tagName.outputs.version }}
        files: |
          Cargo.lock
          rav1e (Windows-msvc-generic)/rav1e.exe
          rav1e-ch (unstable) (AVX2)/rav1e-ch.exe
          rav1e (linux-generic)/rav1e-${{ steps.tagName.outputs.version }}-linux-generic.tar.gz
          rav1e (linux-sse4)/rav1e-${{ steps.tagName.outputs.version }}-linux-sse4.tar.gz
          rav1e (linux-avx2)/rav1e-${{ steps.tagName.outputs.version }}-linux-avx2.tar.gz
          rav1e (linux-aarch64)/rav1e-${{ steps.tagName.outputs.version }}-linux-aarch64.tar.gz
          rav1e (linux-i686)/rav1e-${{ steps.tagName.outputs.version }}-linux-i686.tar.gz
          rav1e (MacOS)/rav1e-${{ steps.tagName.outputs.version }}-macos.zip
          rav1e (Windows-msvc-generic)/rav1e-${{ steps.tagName.outputs.version }}-windows-msvc-generic.zip
          rav1e (Windows-msvc-sse4)/rav1e-${{ steps.tagName.outputs.version }}-windows-msvc-sse4.zip
          rav1e (Windows-msvc-avx2)/rav1e-${{ steps.tagName.outputs.version }}-windows-msvc-avx2.zip
          rav1e (Windows-gnu-generic)/rav1e-${{ steps.tagName.outputs.version }}-windows-gnu-generic.zip
          rav1e (Windows-gnu-sse4)/rav1e-${{ steps.tagName.outputs.version }}-windows-gnu-sse4.zip
          rav1e (Windows-gnu-avx2)/rav1e-${{ steps.tagName.outputs.version }}-windows-gnu-avx2.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
